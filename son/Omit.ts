// T에서 K 프로퍼티만 제거해 새로운 오브젝트 타입을 만드는 내장 제네릭 Omit<T, K>를 이를 사용하지 않고 구현하세요.

type MyOmit<T, K extends keyof T> = {
  [key in keyof T as key extends K ? never : key]: T[key];
};

// 오답
// 우선 K를 T의 키로 제한했다.
// 만약에 MyOmit<T, 'a' | 'b'> 라고 하면 K는 'a' | 'b' 가 된다.
// T의 키를 하나씩 순회하면서 key가 K에 포함되어 있으면 never로 바꾸고, 포함되어 있지 않으면 원래 키를 사용한다.
// 이때 as가 있어야한다! 이걸 몰라서 못했다..
// as가 없으니 키는 유지되면서 값만 변경됐다. { a: never; b: never; } 이런식으로 나왔다.
// 그래서 찾아보니.. as를 이용하여야 키를 재매핑할 수 있다고 한다.
// 그래서 as를 이용하여 key가 K에 포함되어 있으면 never로 바꾸고
// 포함되어 있지 않으면 원래 키를 사용하도록 했다.