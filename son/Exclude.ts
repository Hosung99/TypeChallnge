// T에서 U에 할당할 수 있는 타입을 제외하는 내장 제네릭 Exclude<T, U>를 이를 사용하지 않고 구현하세요.

type MyExclude<T, U> = T extends U ? never : T;

// 정답
// extends는 2가지 사용법이 있다.
// 1. 제네릭에서 타입을 제한하는경우
// 2. 조건부 타입에서 할당가능한지 확인하는 경우 있다. (삼항연산자처럼)
// 여기선 2번의 사용법을 이용해서 T가 U 타입이라면 never를 반환하고 아니라면 해당타입을 반환하도록 exclude를 구현했다.
